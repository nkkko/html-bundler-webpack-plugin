const path = require('path');

const { AsyncSeriesHook, AsyncSeriesWaterfallHook, SyncBailHook, SyncWaterfallHook } = require('tapable');
const Compiler = require('webpack/lib/Compiler');
const Compilation = require('webpack/lib/Compilation');
const Cache = require('webpack/lib/Cache');

const AssetParser = require('webpack/lib/asset/AssetParser');
const AssetGenerator = require('webpack/lib/asset/AssetGenerator');
//const JavascriptParser = require('webpack/lib/javascript/JavascriptParser');
//const JavascriptGenerator = require('webpack/lib/javascript/JavascriptGenerator');

const { pluginName } = require('../config');
const { baseUri, urlPathPrefix, cssLoaderName } = require('../Loader/Utils');
const { findRootIssuer } = require('../Common/CompilationHelpers');
const { isDir } = require('../Common/FileUtils');
const createPersistentCache = require('./createPersistentCache');
const PersistentCache = require('./PersistentCache');

const CssExtractModule = require('./Modules/CssExtractModule');
const Option = require('./Option');
const PluginService = require('./PluginService');
const Collection = require('./Collection');
const Resolver = require('./Resolver');
const Snapshot = require('./Snapshot');
const UrlDependency = require('./UrlDependency');

const Asset = require('./Asset');
const AssetEntry = require('./AssetEntry');
const AssetResource = require('./AssetResource');
const AssetInline = require('./AssetInline');
const AssetTrash = require('./AssetTrash');
const VMScript = require('./VMScript');
const Integrity = require('./Extras/Integrity');

const { compilationName, verbose } = require('./Messages/Info');
const { PluginError, afterEmitException } = require('./Messages/Exception');

const loaderPath = require.resolve('../Loader');

/**
 * The CSS loader.
 *
 * @type {{loader: string, ident: undefined, options: undefined, type: undefined}}
 */
const cssLoader = {
  loader: require.resolve('../Loader/cssLoader.js'),
  type: undefined,
  options: undefined,
  ident: undefined,
};

/** @typedef {import("enhanced-resolve/lib/Resolver")} Resolver */

/** @typedef {import('webpack/declarations/WebpackOptions').Output} WebpackOutputOptions */
/** @typedef {import('webpack').Compiler} Compiler */
/** @typedef {import('webpack').Compilation} Compilation */
/** @typedef {import('webpack/lib/FileSystemInfo')} FileSystemInfo */
/** @typedef {import('webpack/lib/FileSystemInfo').Snapshot} FileSystemSnapshot */
/** @typedef {import('webpack').ChunkGraph} ChunkGraph */
/** @typedef {import('webpack').Chunk} Chunk */
/** @typedef {import('webpack').Module} Module */
/** @typedef {import('webpack').sources.Source} Source */
/** @typedef {import('webpack-sources').RawSource} RawSource */
/** @typedef {import('webpack').Configuration} Configuration */
/** @typedef {import('webpack').PathData} PathData */
/** @typedef {import('webpack').AssetInfo} AssetInfo */

/**
 * @typedef {Module} PluginModuleMeta Meta information for module generated by the plugin.
 * @property {boolean} isTemplate
 * @property {boolean} isScript
 * @property {boolean} isStyle
 * @property {boolean} isImportedStyle
 * @property {boolean} isLoaderImport
 * @property {boolean} isDependencyUrl
 */

/**
 * @typedef {Object} FileInfo
 * @property {string} resource The resource file, including a query.
 * @property {string|undefined} filename The output filename.
 */

/** @type {WeakMap<Compilation, HtmlBundlerPlugin.Hooks>} */
const compilationHooksMap = new WeakMap();

let HotUpdateChunk;
let RawSource;

class AssetCompiler {
  entryLibrary = {
    name: 'return',
    type: 'jsonp', // compiles JS from source into HTML string via Function()
  };

  /** @type AssetEntryOptions The current entry point during dependency compilation. */
  currentEntryPoint;

  /** @type Set<Error> Buffered exceptions thrown in hooks. */
  exceptions = new Set();

  isSnapshotInitialized = false;

  /** @type {FileSystem} */
  fs = null;

  /** @type {Compilation} */
  compilation = null;

  /** @type {Array<Promise>} */
  promises = [];

  static processAssetsPromises = [];

  /**
   * Use the OptionPluginInterface in custom plugins, e.g.:
   * const outputPath = HtmlBundlerPlugin.option.getWebpackOutputPath();
   *
   * @type {OptionPluginInterface | Option}
   */
  static option = Option;

  /**
   * @param {Compilation} compilation The compilation.
   * @returns {HtmlBundlerPlugin.Hooks} The attached hooks.
   */
  static getHooks(compilation) {
    if (!(compilation instanceof Compilation)) {
      throw new TypeError(`The 'compilation' argument must be an instance of Compilation`);
    }

    let hooks = compilationHooksMap.get(compilation);

    if (hooks == null) {
      hooks = {
        // use a bail or waterfall hook when the hook returns something
        beforePreprocessor: new AsyncSeriesWaterfallHook(['content', 'loaderContext']),
        preprocessor: new AsyncSeriesWaterfallHook(['content', 'loaderContext']),
        // TODO: implement afterPreprocessor when will be required the feature
        //afterPreprocessor: new AsyncSeriesWaterfallHook(['content', 'loaderContext']),
        resolveSource: new SyncWaterfallHook(['source', 'info']),
        postprocess: new AsyncSeriesWaterfallHook(['content', 'info']),
        beforeEmit: new AsyncSeriesWaterfallHook(['content', 'entry']),
        afterEmit: new AsyncSeriesHook(['entries']),
        integrityHashes: new AsyncSeriesHook(['hashes']),
      };
      compilationHooksMap.set(compilation, hooks);
    }

    return hooks;
  }

  /**
   * @param {PluginOptions|{}} options
   */
  constructor(options = {}) {
    Option.init(options, { assetEntry: AssetEntry, loaderPath: loaderPath });

    // let know the loader that the plugin is being used
    PluginService.init(Option);

    // bind the instance context for using these methods as references in Webpack hooks
    this.invalidate = this.invalidate.bind(this);
    this.afterProcessEntry = this.afterProcessEntry.bind(this);
    this.beforeResolve = this.beforeResolve.bind(this);
    this.afterResolve = this.afterResolve.bind(this);
    this.afterCreateModule = this.afterCreateModule.bind(this);
    this.beforeLoader = this.beforeLoader.bind(this);
    this.afterBuildModule = this.afterBuildModule.bind(this);
    this.renderManifest = this.renderManifest.bind(this);
    this.filterAlternativeRequests = this.filterAlternativeRequests.bind(this);
    this.afterEmit = this.afterEmit.bind(this);
    this.done = this.done.bind(this);
  }

  /**
   * Called when a compiler object is initialized.
   * Abstract method should be overridden in child class.
   *
   * @param {Compiler} compiler The instance of the webpack compiler.
   * @abstract
   */
  initialize(compiler) {}

  /**
   * Apply plugin.
   *
   * @param {Compiler} compiler
   */
  apply(compiler) {
    if (!Option.isEnabled()) return;

    const { webpack } = compiler;
    const { NormalModule, Compilation } = webpack;

    this.fs = compiler.inputFileSystem.fileSystem;
    this.webpack = webpack;
    HotUpdateChunk = webpack.HotUpdateChunk;
    RawSource = webpack.sources.RawSource;

    PluginError.clear();
    Option.initWebpack(compiler.options);
    Option.enableLibraryType(this.entryLibrary.type);
    AssetResource.init(compiler);

    this.initialize(compiler);
    this.promises = [];

    // initialize integrity plugin
    this.integrityPlugin = new Integrity(Option);

    // clear caches by tests for webpack serve/watch
    AssetEntry.clear();
    AssetInline.clear();
    Collection.clear();
    Resolver.clear();
    Snapshot.clear();

    if (Option.isCacheable()) {
      const cache = compiler.getCache(pluginName).getItemCache('PersistentCache', null);
      const persistentCache = createPersistentCache(PersistentCache);
      let isCached = false;

      compiler.hooks.beforeCompile.tap(pluginName, () => {
        cache.get((error, data) => {
          if (error) {
            throw new Error(error);
          }
          isCached = !!data;
        });
      });

      compiler.cache.hooks.shutdown.tap({ name: pluginName, stage: Cache.STAGE_DISK }, () => {
        if (!isCached) {
          const cacheData = persistentCache.getData();

          cache.store(cacheData, (error) => {
            if (error) {
              throw new Error(error);
            }
          });
        }
      });
    }

    // executes by watch/serve only, before the compilation
    compiler.hooks.watchRun.tap(pluginName, (compiler) => {
      Option.initWatchMode();
      PluginService.setWatchMode(true);
      PluginService.watchRun();
    });

    // TODO:
    //  - before AssetEntry.initEntry() init preprocessor by Loader.Options to get `test`

    // entry option
    AssetEntry.initEntry();
    compiler.hooks.entryOption.tap(pluginName, this.afterProcessEntry);

    // watch changes for entry-points
    compiler.hooks.invalid.tap(pluginName, this.invalidate);

    // this compilation
    compiler.hooks.thisCompilation.tap(pluginName, (compilation, { normalModuleFactory, contextModuleFactory }) => {
      const fs = this.fs;
      const normalModuleHooks = NormalModule.getCompilationHooks(compilation);

      this.compilation = compilation;

      // TODO: refactor
      PluginService.plugin = AssetCompiler;
      PluginService.compilation = compilation;

      AssetEntry.init({ compilation, entryLibrary: this.entryLibrary, collection: Collection });
      AssetTrash.init(compilation);
      CssExtractModule.init(compilation);
      Collection.init(compilation, AssetCompiler.getHooks(compilation));

      Resolver.init({
        fs,
        rootContext: Option.context,
      });

      UrlDependency.init(fs, compilation);

      // resolve modules
      normalModuleFactory.hooks.beforeResolve.tap(pluginName, this.beforeResolve);
      normalModuleFactory.hooks.afterResolve.tap(pluginName, this.afterResolve);
      contextModuleFactory.hooks.alternativeRequests.tap(pluginName, this.filterAlternativeRequests);

      // TODO: reserved for next major version supported Webpack 5.81+
      //  - add support for lazy load CSS in JavaScript, see js-import-css-lazy-url
      //  - move the code from afterCreateModule to here
      //  - replace the 'javascript/auto' with constant from webpack
      // normalModuleFactory.hooks.createModuleClass.for('javascript/auto').tap(pluginName, (createData, resolveData) => {
      //   const {
      //     _bundlerPluginMeta: { isImportedStyle },
      //   } = resolveData;
      //   const query = createData.resourceResolveData?.query || '';
      //   const isUrl = query.includes('url');
      //
      //   if (isImportedStyle && isUrl && !query.includes(cssLoaderName)) {
      //     const dataUrlOptions = undefined;
      //     const filename = Option.getCss().filename;
      //     createData.settings.type = 'asset/resource';
      //     createData.type = 'asset/resource';
      //     createData.binary = true;
      //     createData.parser = new AssetParser(false);
      //     createData.generator = new AssetGenerator(dataUrlOptions, filename);
      //   }
      // });

      // build modules
      normalModuleFactory.hooks.module.tap(pluginName, this.afterCreateModule);
      compilation.hooks.buildModule.tap(pluginName, this.beforeBuildModule);
      compilation.hooks.succeedModule.tap(pluginName, this.afterBuildModule);

      // called after the succeedModule hook but right before the execution of a loader
      normalModuleHooks.loader.tap(pluginName, this.beforeLoader);

      // render source code of modules
      compilation.hooks.renderManifest.tap(pluginName, this.renderManifest);

      // Notes:
      // - the TerserPlugin creates a `.LICENSE.txt` file at the PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE stage
      // - the integrity hash will be created at the next stage, therefore,
      //   the license file and the license banner must be removed before PROCESS_ASSETS_STAGE_OPTIMIZE_INLINE
      compilation.hooks.processAssets.tap(
        { name: pluginName, stage: Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE + 1 },
        (assets) => {
          if (!Option.isExtractComments()) {
            AssetTrash.removeComments();
          }
        }
      );

      // after render module's sources
      // Notes:
      // - only here is possible to modify an asset content via async function
      // - `Infinity` ensures that the process will be run after all optimizations
      // compilation.hooks.processAssets.tapPromise({ name: pluginName, stage: Infinity }, (assets) =>
      //   Collection.render()
      //     .then(() => {
      //       // remove all unused assets from compilation
      //       AssetTrash.clearCompilation();
      //     })
      //     .catch((error) => {
      //       // this hook doesn't provide testable exceptions, therefore, save an exception to throw it in the done hook
      //       this.exceptions.add(error);
      //     })
      // );

      compilation.hooks.processAssets.tapPromise({ name: pluginName, stage: Infinity }, (assets) => {
        if (PluginError.size > 0) {
          // when the previous compilation hook has an error, then skip this hook
          return Promise.resolve();
        }

        return Collection.render()
          .then(() => {
            // remove all unused assets from compilation
            AssetTrash.clearCompilation();
          })
          .catch((error) => {
            // this hook doesn't provide testable exceptions, therefore, save an exception to throw it in the done hook
            this.exceptions.add(error);
          });
      });
    });

    compiler.hooks.afterEmit.tapPromise(pluginName, this.afterEmit);
    compiler.hooks.done.tapPromise(pluginName, this.done);
    compiler.hooks.shutdown.tap(pluginName, this.shutdown);
    compiler.hooks.watchClose.tap(pluginName, this.shutdown);

    // run integrity plugin
    if (Option.isIntegrityEnabled()) this.integrityPlugin.apply(compiler);
  }

  /* istanbul ignore next: this method is called in watch mode after changes */
  /**
   * Invalidate changed file.
   *
   * Called in serve/watch mode.
   *
   * Limitation: currently supports for change only a single file.
   *
   * TODO: add supports to add/remove many files.
   *      The problem: if added/removed many files,
   *      then webpack calls the 'invalid' hook many times, for each file separately.
   *      Research: find the hook, what called once, before the 'invalid' hook,
   *      to create the snapshot of files after change.
   *
   * @param {string} fileName The old filename before change.
   * @param {Number|null} changeTime
   */
  invalidate(fileName, changeTime) {
    const fs = this.fs;
    const entryDir = Option.getEntryPath();
    const isDirectory = isDir({ fs, file: fileName });

    Snapshot.create();

    if (isDirectory === true) return;

    const { actionType, newFileName, oldFileName } = Snapshot.detectFileChange();
    const isScript = Option.isScript(fileName);
    const inCollection = Collection.hasScript(fileName);
    const isEntryFile = (file) => file && file.startsWith(entryDir) && Option.isEntry(file);

    // 1. Invalidate an entry template.

    if (Option.isDynamicEntry() && (isEntryFile(fileName) || isEntryFile(oldFileName) || isEntryFile(newFileName))) {
      switch (actionType) {
        case 'modify':
          Collection.disconnectEntry(fileName);
          break;
        case 'add':
          AssetEntry.addEntry(newFileName);
          Collection.disconnectEntry(newFileName);
          break;
        case 'rename':
          AssetEntry.deleteEntry(oldFileName);
          AssetEntry.addEntry(newFileName);
          break;
        case 'remove':
          AssetEntry.deleteEntry(oldFileName);
          break;
        default:
          break;
      }

      return;
    }

    // 2. Invalidate a JavaScript file loaded in an entry template.

    if (actionType && isScript) {
      switch (actionType) {
        case 'add':
        // through
        case 'rename':
          const missingFiles = Snapshot.getMissingFiles();
          const { modules } = this.compilation;

          missingFiles.forEach((files, issuer) => {
            const missingFile = Array.from(files).find((file) => newFileName.endsWith(file));

            // if an already used js file was unlinked in html and then renamed
            if (!missingFile) return;

            for (const module of modules) {
              // the same template can be in many modules
              if (module.resource === issuer || module.resource === newFileName) {
                // reset errors for an unresolved js file, because the file can be renamed
                module._errors = [];

                // after rename a js file, try to rebuild the module of the entry file where the js file was linked
                this.compilation.rebuildModule(module, (err) => {
                  // after rebuild, remove the missing file to avoid double rebuilding by another exception
                  Snapshot.deleteMissingFile(issuer, missingFile);
                  AssetEntry.deleteMissingFile(missingFile);
                });
              }
            }
          });
          break;
        case 'remove':
          // do nothing
          break;
        default:
          break;
      }

      if (inCollection && (actionType === 'remove' || actionType === 'rename')) {
        AssetEntry.deleteEntry(oldFileName);
      }
    }
  }

  /**
   * Called after the entry configuration from webpack options has been processed.
   *
   * @param {string} context The base directory, an absolute path, for resolving entry points and loaders from the configuration.
   * @param {Object<name:string, entry: Object>} entries The webpack entries.
   */
  afterProcessEntry(context, entries) {
    AssetEntry.addEntries(entries);
  }

  /**
   * Filter alternative requests.
   *
   * Entry files should not have alternative requests.
   * If the template file contains require and is compiled with `compile` mode,
   * then ContextModuleFactory generates additional needless request as the relative path without a query.
   * Such 'alternative request' must be removed from compilation.
   *
   * @param {Array<{}>} requests
   * @param {{}} options
   * @return {Array|undefined} Returns only alternative requests not related to entry files.
   */
  filterAlternativeRequests(requests, options) {
    // skip the request required as 'asset/source' with the '?raw' resourceQuery
    // see https://webpack.js.org/guides/asset-modules/#replacing-inline-loader-syntax
    if (/\?raw/.test(options.resourceQuery)) return;

    return requests.filter((item) => !Option.isEntry(item.request));
  }

  /**
   * Called when a new dependency request is encountered.
   *
   * @param {Object} resolveData
   * @return {boolean|undefined} Return undefined to processing, false to ignore dependency.
   */
  beforeResolve(resolveData) {
    const { request, dependencyType } = resolveData;
    const [file] = request.split('?', 1);
    const entryId = AssetEntry.resolveEntryId(resolveData);

    /** @type PluginModuleMeta */
    const meta = {
      isTemplate: AssetEntry.isEntryResource(file),
      isScript: false,
      isStyle: false,
      isImportedStyle: false,
      isParentLoaderImport: false,
      isLoaderImport: dependencyType === 'loaderImport',
      isDependencyUrl: dependencyType === 'url',
    };
    resolveData._bundlerPluginMeta = meta;
    resolveData.entryId = entryId;

    /* istanbul ignore next */
    // prevent compilation of renamed or deleted entry point in serve/watch mode
    if (Option.isDynamicEntry() && AssetEntry.isDeletedEntryFile(file)) {
      for (const [entryName, entry] of this.compilation.entries) {
        if (entry.dependencies[0]?.request === request) {
          // delete the entry from compilation to prevent creation unused chunks
          this.compilation.entries.delete(entryName);
        }
      }

      return false;
    }

    if (meta.isDependencyUrl) {
      UrlDependency.resolve(resolveData);
    }
  }

  /**
   * Called after the request is resolved.
   *
   * @param {Object} resolveData
   * @return {boolean|undefined} Return undefined to processing, false to ignore dependency.
   */
  afterResolve(resolveData) {
    const { request, contextInfo, dependencyType, createData, _bundlerPluginMeta: meta } = resolveData;
    const { resource } = createData;
    const [file] = resource.split('?', 1);
    // note: the contextInfo.issuer is the filename w/o a query
    const { issuer } = contextInfo;

    // the filename with an extension is available only after resolve
    meta.isStyle = Option.isStyle(file);

    // skip: module loaded via importModule, css url, data-URL
    if (meta.isLoaderImport || meta.isDependencyUrl || request.startsWith('data:')) return;

    if (issuer) {
      const isIssuerStyle = Option.isStyle(issuer);
      const parentModule = resolveData.dependencies[0]?._parentModule;
      const { isLoaderImport } = parentModule?.resourceResolveData?._bundlerPluginMeta || {};

      // skip the module loaded via importModule
      if (isLoaderImport) {
        meta.isParentLoaderImport = true;
        return;
      }

      // exclude from compilation the css-loader runtime scripts for styles specified in HTML only,
      // to avoid splitting the loader runtime scripts;
      // allow runtime scripts for styles imported in JavaScript, regards deep imported styles via url()
      if (isIssuerStyle && file.endsWith('.js')) {
        const rootIssuer = findRootIssuer(this.compilation, issuer);
        meta.isScript = true;

        // return true if the root issuer is a JS (not style and not template), otherwise return false
        return rootIssuer != null && !Option.isStyle(rootIssuer) && !Option.isEntry(rootIssuer);
      }

      // style loaded in *.vue file
      if (request.includes('?vue&')) {
        const { type } = Object.fromEntries(new URLSearchParams(request).entries());

        if (type === 'style') {
          meta.isStyle = true;
          meta.isVueStyle = true;
        }
      }

      // try to detect imported style as resolved resource file, because a request can be a node module w/o an extension
      // the issuer can be a style if a scss contains like `@import 'main.css'`
      if (!Option.isStyle(issuer) && !Option.isEntry(issuer) && meta.isStyle) {
        const rootIssuer = findRootIssuer(this.compilation, issuer);

        Collection.importStyleRootIssuers.add(rootIssuer || issuer);
        meta.isImportedStyle = true;

        if (!createData.request.includes(cssLoader.loader)) {
          // the request of an imported style must be different from the request for the same style specified in a html,
          // otherwise webpack doesn't apply the added loader for the imported style,
          // see the test case js-import-css-same-in-many4
          createData.request = `${cssLoader.loader}!${createData.request}`;

          if (meta.isVueStyle) {
            createData.loaders = this.filterStyleLoaders(createData.loaders, parentModule.loaders);
          } else {
            createData.loaders = [cssLoader, ...createData.loaders];
          }
        }
      }
    }

    meta.isScript = Collection.hasScript(request);
  }

  /**
   * Returns unique style loaders only.
   *
   * If a style file is imported in *.vue file then:
   *  - remove the needles vue loader
   *  - remove double loaders, occurs when using the lang="scss" attribute, e.g.: <style src="./style.scss" lang="scss">
   *
   * @param {Array<Object>} loaders The mishmash of loaders with duplicates.
   * @param {Array<Object> | []} parentLoaders The issuer loaders.
   * @return {Array<Object>} The style loaders.
   */
  filterStyleLoaders(loaders, parentLoaders) {
    const loaderRegExp = /([\\/]node_modules[\\/].+?[\\/])/;
    const parentLoaderNames = [];
    const uniqueStyleLoaders = new Map();

    for (let { loader } of parentLoaders) {
      let [loaderName] = loader.match(loaderRegExp);
      if (loaderName) parentLoaderNames.push(loaderName);
    }

    // ignore endpoint (first) loader used by the issuer, e.g., when a style is imported in *.vue file, ignore vue loader
    if (parentLoaderNames.find((name) => loaders[0].loader.includes(name))) {
      loaders.shift();
    }

    for (let item of loaders) {
      // skip duplicate loader
      if (uniqueStyleLoaders.has(item.loader)) continue;
      uniqueStyleLoaders.set(item.loader, item);
    }

    return [cssLoader, ...uniqueStyleLoaders.values()];
  }

  /**
   * Called after a module instance is created.
   *
   * @param {Module} module The Webpack module.
   * @param {Object} createData
   * @param {Object} resolveData
   */
  afterCreateModule(module, createData, resolveData) {
    const { _bundlerPluginMeta: meta } = resolveData;
    const { rawRequest, resource } = createData;
    const query = module.resourceResolveData?.query || '';
    const isUrl = query.includes('url');

    // TODO: undocumented experimental support for url load a source style file (with `?url` query) in JavaScript
    if (meta.isImportedStyle && isUrl && !query.includes(cssLoaderName)) {
      const dataUrlOptions = undefined;
      const filename = Option.getCss().filename;

      module.type = 'asset/resource';
      module.binary = true;
      module.parser = new AssetParser(false);
      module.generator = new AssetGenerator(dataUrlOptions, filename);
    }

    AssetEntry.connectEntryAndModule(module, resolveData);

    // skip the module loaded via importModule
    if (meta.isLoaderImport || meta.isParentLoaderImport) return;

    const { type, loaders } = module;
    const { issuer } = resolveData.contextInfo;

    // add missed scripts to compilation after deserialization
    if (meta.isTemplate) {
      Collection.isDeserialized && Collection.addToCompilationDeserializedFiles(resource);
      return;
    }

    if (!issuer || AssetInline.isDataUrl(rawRequest)) return;

    if (type === 'asset/inline' || type === 'asset' || (type === 'asset/source' && AssetInline.isSvgFile(resource))) {
      AssetInline.add(resource, issuer, Option.isEntry(issuer));
    }

    if (meta.isDependencyUrl && meta.isScript) return;

    // add resolved sources in use cases:
    // - if used url() in SCSS for source assets
    // - if used import url() in CSS, like `@import url('./styles.css');`
    // - if used webpack context
    if (meta.isDependencyUrl || loaders.length > 0 || type === 'asset/resource') {
      Resolver.addSourceFile(resource, rawRequest, issuer);
    }
  }

  /**
   * Called before a module build has started.
   * Use this method to modify the module.
   *
   * @param {{}} module The extended Webpack module.
   */
  beforeBuildModule(module) {
    //const { isScript, isStyle, isLoaderImport, isDependencyUrl } = module.resourceResolveData._bundlerPluginMeta;
    // reserved code for future
    // skip the module loaded via importModule
    // if (isLoaderImport) return;
    // if (
    //   module.type === 'asset/resource' &&
    //   (isScript || (isStyle && isDependencyUrl))
    // ) {
    //   // set correct module type for scripts and styles when used the `html` mode of a loader
    //   module.type = 'javascript/auto';
    //   module.binary = false;
    //   module.parser = new JavascriptParser('auto');
    //   module.generator = new JavascriptGenerator();
    // }
  }

  /**
   * Called after the build module but right before the execution of a loader.
   *
   * @param {Object} loaderContext The Webpack loader context.
   * @param {{}} module The extended Webpack module.
   */
  beforeLoader(loaderContext, module) {
    const { isTemplate, isLoaderImport } = module.resourceResolveData._bundlerPluginMeta;

    // skip the module loaded via importModule
    if (isLoaderImport) return;

    if (isTemplate) {
      const entryId = AssetEntry.getEntryId(module);
      const entry = AssetEntry.getById(entryId);

      if (entry.isTemplate && entry.resource === module.resource) {
        this.beforeProcessTemplate(entryId);
      }

      loaderContext.entryId = entryId;
      loaderContext.entryName = entry.originalName;
      loaderContext.entryData = AssetEntry.getData(entryId);
    }
  }

  /**
   * Called after a module has been built successfully, after loader processing.
   *
   * Note: when the `cache.type` option is set to 'filesystem', then by 2nd `npm start` this hook will not be called.
   *
   * @param {Object} module The Webpack module.
   */
  afterBuildModule(module) {}

  /**
   * @param {Array<Object>} result
   * @param {Object} chunk
   * @param {Object} chunkGraph
   * @param {Object} outputOptions
   * @param {Object} codeGenerationResults
   */
  renderManifest(result, { chunk, chunkGraph, codeGenerationResults }) {
    if (chunk instanceof HotUpdateChunk) return;

    const entry = AssetEntry.get(chunk.name);

    // process only entries supported by this plugin
    if (!entry || (!entry.isTemplate && !entry.isStyle)) return;

    const assetModules = new Set();
    const chunkModules = chunkGraph.getChunkModulesIterable(chunk);

    AssetEntry.setFilename(entry, chunk);
    Collection.addEntry(entry);

    for (const module of chunkModules) {
      const { buildInfo, resource, resourceResolveData } = module;
      const { isScript, isImportedStyle } = resourceResolveData?._bundlerPluginMeta || {};
      let moduleType = module.type;

      if (
        isScript ||
        isImportedStyle ||
        !resource ||
        !resourceResolveData?.context ||
        AssetInline.isDataUrl(resource)
      ) {
        // do nothing for scripts because webpack itself compiles and extracts JS files from scripts
        continue;
      }

      const contextIssuer = resourceResolveData.context.issuer;

      // note: the contextIssuer may be wrong, as previous entry, because Webpack distinct same modules by first access
      let issuer = contextIssuer === entry.sourceFile ? entry.resource : contextIssuer;
      if (!issuer || Option.isEntry(issuer)) {
        issuer = entry.resource;
      }

      // decide an asset type by webpack option parser.dataUrlCondition.maxSize
      if (moduleType === 'asset') {
        moduleType = buildInfo.dataUrl === true ? 'asset/inline' : 'asset/resource';
      }

      switch (moduleType) {
        case 'javascript/auto':
          const assetModule = this.createAssetModule(entry, chunk, module);

          if (assetModule == null) continue;
          if (assetModule === false) return;

          assetModules.add(assetModule);
          break;
        case 'asset/resource':
          // resource required in the template or in the CSS via url()
          AssetResource.saveData(module);
          break;
        case 'asset/inline':
          AssetInline.saveData(entry, chunk, module, codeGenerationResults);
          break;
        case 'asset/source':
          // support the source type for SVG only
          if (AssetInline.isSvgFile(resource)) {
            AssetInline.saveData(entry, chunk, module, codeGenerationResults);
          }
          break;
        default:
        // do nothing
      }
    }

    // 1. render entries and styles specified in HTML
    for (const module of assetModules) {
      const { fileManifest } = module;
      let content = this.renderModule(module);

      if (content == null) continue;

      if (typeof content === 'string') content = new RawSource(content);

      fileManifest.render = () => content;
      fileManifest.filename = module.assetFile;
      result.push(fileManifest);
    }

    // 2. renders styles imported in JavaScript
    if (Collection.hasImportedStyle(this.currentEntryPoint?.id)) {
      this.renderImportStyles(result, { chunk });
    }
  }

  /**
   * @param {AssetEntryOptions} entry The entry point of the chunk.
   * @param {Chunk} chunk The chunk of an asset.
   * @param {Module} module The module of the chunk.
   * @return {Object|null|boolean} assetModule Returns the asset module object.
   *   If returns undefined, then skip processing of the module.
   *   If returns null, then break the hook processing to show the original error, occurs by an inner error.
   */
  createAssetModule(entry, chunk, module) {
    const { compilation } = this;
    const { buildInfo, resource } = module;
    const [sourceFile] = resource.split('?', 1);
    const source = module.originalSource();

    // break process if occurs an error in module builder
    if (source == null) return false;

    // note: the `id` is
    // - in production mode as a number
    // - in development mode as a relative path
    const moduleId = compilation.chunkGraph.getModuleId(module);
    const assetModule = {
      // resourceInfo
      outputPath: undefined,
      filename: undefined,
      // renderContent arguments
      type: undefined,
      inline: false,
      source,
      sourceFile,
      resource,
      assetFile: undefined,
      fileManifest: {
        identifier: undefined,
        hash: undefined,
      },
    };

    if (sourceFile === entry.sourceFile) {
      //const assetFile = AssetEntry.getFilename(entry);
      const assetFile = entry.filename;
      // note: the entry can be not a template file, e.g., a style or script defined directly in entry
      if (entry.isTemplate) {
        this.currentEntryPoint = entry;
        assetModule.type = Collection.type.template;

        // save the template request with the query, because it can be resolved with different output paths:
        // - 'index':    './index.ext'         => dist/index.html
        // - 'index/de': './index.ext?lang=de' => dist/de/index.html
        Asset.add(resource, assetFile);
      } else if (Option.isStyle(sourceFile)) {
        assetModule.type = Collection.type.style;
      } else {
        // skip an unsupported entry type
        return;
      }

      assetModule.name = entry.originalName;
      assetModule.outputPath = entry.outputPath;
      assetModule.filename = entry.filenameTemplate;
      assetModule.assetFile = assetFile;
      assetModule.fileManifest.identifier = `${pluginName}.${chunk.id}`;
      assetModule.fileManifest.hash = chunk.contentHash['javascript'];

      return assetModule;
    }

    // extract CSS
    const cssOptions = Option.getStyleOptions(sourceFile);
    if (cssOptions == null) return;

    const inline = Collection.isInlineStyle(resource);
    const { name } = path.parse(sourceFile);
    const hash = buildInfo.assetInfo?.contenthash || buildInfo.hash;
    const { isCached, filename } = this.getStyleAsseFile({
      name,
      chunkId: chunk.id,
      hash,
      resource: sourceFile,
    });
    const assetFile = inline ? this.getInlineStyleAsseFile(filename, this.currentEntryPoint.filename) : filename;
    const data = {
      type: Collection.type.style,
      inline,
      resource,
      assetFile,
    };

    Collection.setData(this.currentEntryPoint, null, data);
    Resolver.addAsset({ resource, filename: assetFile });

    // skip already processed styles except inlined
    if (isCached && !inline) {
      return;
    }

    assetModule.type = Collection.type.style;
    assetModule.inline = inline;
    assetModule.outputPath = cssOptions.outputPath;
    assetModule.filename = cssOptions.filename;
    assetModule.assetFile = assetFile;
    assetModule.fileManifest.identifier = `${pluginName}.${chunk.id}.${moduleId}`;
    assetModule.fileManifest.hash = hash;

    return assetModule;
  }

  /**
   * Render styles imported in JavaScript.
   *
   * TODO: preload for images from imported styles
   *
   * @param {Array<Object>} result
   * @param {Object} chunk
   */
  renderImportStyles(result, { chunk }) {
    const { createHash } = this.webpack.util;
    const isAutoPublicPath = Option.isAutoPublicPath();
    const publicPath = Option.getPublicPath();
    const inline = Option.getCss().inline;
    const esModule = Collection.isImportStyleEsModule();
    const urlRegex = new RegExp(`${esModule ? baseUri : ''}${urlPathPrefix}(.+?)(?=\\))`, 'g');
    const entry = this.currentEntryPoint;
    const entryFilename = entry.filename;
    const orderedRootIssuers = Collection.orderedResources.get(entry.id);

    for (const issuer of orderedRootIssuers) {
      if (!Collection.importStyleRootIssuers.has(issuer)) continue;

      const issuerEntry = AssetEntry.getByResource(issuer);
      const sources = [];
      const resources = [];
      const imports = [];
      let cssHash = '';

      // 1. get styles from all nested files imported in the root JS file and sort them
      const modules = Collection.findImportedModules(entry.id, issuer, chunk);

      // 2. squash styles from all nested files into one file
      const uniqueModuleIds = new Set();
      for (const { module } of modules) {
        if (uniqueModuleIds.has(module.debugId)) {
          continue;
        }

        const isUrl = module.resourceResolveData?.query.includes('url');
        const importData = {
          resource: module.resource,
          assets: [],
        };

        // note: webpack self replaces inlined images in imported style, do nothing for it
        const { assetsInfo } = module.buildInfo;

        if (assetsInfo) {
          for (const [assetFile2, asset] of assetsInfo) {
            const sourceFilename = asset.sourceFilename;
            const stylePath = path.dirname(module.resource);

            const data = {
              type: Collection.type.resource,
              inline: false,
              resource: path.resolve(stylePath, sourceFilename),
              assetFile: assetFile2,
              issuer: {
                resource: module.resource,
              },
            };

            importData.assets.push(data);
          }
        }

        if (isUrl) {
          // get url of css output filename in js for the lazy load
          Collection.setData(
            entry,
            { resource: issuer },
            {
              type: Collection.type.style,
              // lazy file can't be inlined, it makes no sense
              inline: false,
              lazyUrl: true,
              resource: module.resource,
              assetFile: module.buildInfo.filename,
            }
          );
          continue;
        }

        cssHash += module.buildInfo.hash;
        sources.push(...module._cssSource);
        imports.push(importData);
        resources.push(module.resource);
        uniqueModuleIds.add(module.debugId);
      }

      if (sources.length === 0) continue;

      // 3. generate output filename

      // mixin importStyleIdx into hash to generate new hash after changes
      cssHash += Collection.importStyleIdx++;

      //const hash = this.webpack.util.createHash('md4').update(sources.toString()).digest('hex');
      const hash = createHash('md4').update(cssHash).digest('hex');
      const { isCached, filename } = this.getStyleAsseFile({
        name: issuerEntry.name,
        chunkId: chunk.id,
        hash,
        resource: issuer,
        useChunkFilename: true,
      });

      const assetFile = inline ? this.getInlineStyleAsseFile(filename, entryFilename) : filename;
      const outputFilename = inline ? assetFile : Option.getAssetOutputFile(assetFile, entryFilename);

      Collection.setData(
        entry,
        { resource: issuer },
        {
          type: Collection.type.style,
          inline,
          imported: true,
          // if style is imported then resource is the array of imported source files
          resource: resources,
          assetFile: outputFilename,
          imports,
        }
      );

      // skip already processed styles except inlined
      if (isCached && !inline) {
        continue;
      }

      // 4. extracts CSS content from squashed sources
      const issuerFilename = inline ? entryFilename : assetFile;

      const resolveAssetFile = (match, file) =>
        isAutoPublicPath ? Option.getAssetOutputFile(file, issuerFilename) : path.posix.join(publicPath, file);

      const cssContent = CssExtractModule.apply(sources, (content) => content.replace(urlRegex, resolveAssetFile));

      // 5. add extracted CSS file into compilation
      const fileManifest = {
        render: () => cssContent,
        filename: assetFile,
        identifier: `${pluginName}.${chunk.id}`,
        hash,
      };

      result.push(fileManifest);
    }
  }

  /**
   * Get a unique output CSS filename relative to the output path.
   *
   * @param {string} name
   * @param {string} chunkId
   * @param {string} hash
   * @param {string} resource
   * @param {boolean} useChunkFilename
   * @return {{isCached: boolean, filename: string}}
   */
  getStyleAsseFile({ name, chunkId, hash, resource, useChunkFilename = false }) {
    const { compilation } = this;
    const cssOptions = Option.getCss();
    const filenameTemplate = useChunkFilename ? cssOptions.chunkFilename : cssOptions.filename;

    /** @type {PathData} The data to generate an asset path by the filename template. */
    const pathData = {
      contentHash: hash,
      chunk: {
        chunkId,
        name,
        hash,
      },
      filename: resource,
    };

    const assetPath = compilation.getAssetPath(filenameTemplate, pathData);
    const outputFilename = Option.resolveOutputFilename(assetPath, cssOptions.outputPath);
    const [sourceFile] = resource.split('?', 1);

    // avoid the conflict: multiple chunks emit assets to the same filename
    // this occurs when filename template not contains a hash subsituation,
    // then the output name of css and its issuer is the same
    return Asset.getUniqueFilename(sourceFile, outputFilename);
  }

  /**
   * Get temporary unique output filename for inline css.
   *
   * The same compiled CSS file must have a unique output filename by the entry.
   * After inlining of the compiled asset, this temporary file will be removed from compilation,
   * to avoid creating needles files.
   *
   * @param {string} assetFile
   * @param {string} issuerFile
   * @returns {string}
   */
  getInlineStyleAsseFile(assetFile, issuerFile) {
    return `${issuerFile}_${assetFile}`.replace(/\//g, '-');
  }

  /**
   * Render the module source code generated by a loader.
   *
   * @param {string} type The type of module, one of the values: template, style.
   * @param {Object} source The Webpack source.
   * @param {string} resource The full path of source file, including a query.
   * @param {string} sourceFile The full path of source file w/o a query.
   * @param {string} assetFile
   * @return {string|null} Return rendered HTML or null to not save the rendered content.
   */
  renderModule({ type, source, sourceFile, resource, assetFile }) {
    /** @type  FileInfo */
    const issuer = {
      resource,
      filename: assetFile,
    };
    Resolver.setContext(this.currentEntryPoint, issuer);

    const vmScript = new VMScript({
      require: Resolver.require,
      // required for `css-loader`
      module: { id: sourceFile },
      // required for ssr
      __filename: sourceFile,
    });

    // the css-loader defaults generate ESM code, which must be transformed into CommonJS to compile the code
    // the template loader generates CommonJS code, no need to transform
    const esModule = type === 'style';
    let result = vmScript.compile(source, sourceFile, esModule);

    if (type === 'style') {
      result = CssExtractModule.apply(result);
    }

    return result;
  }

  /**
   * @param {number} entryId
   */
  beforeProcessTemplate(entryId) {
    Collection.beforeProcessTemplate(entryId);
  }

  /**
   * @param {Compilation} compilation
   * @return {Promise<void>}
   */
  afterEmit(compilation) {
    const hooks = AssetCompiler.getHooks(compilation);
    /** @type {CompileEntries} */
    const entries = [];
    const promise = Promise.resolve();

    if (Option.isIntegrityEnabled()) {
      promise.then(() => {
        const hashes = Integrity.getAssetHashes(compilation);
        return hooks.integrityHashes.promise(hashes);
      });
    }

    promise
      .then(() => {
        // prepare the CompileEntries for the hook
        for (const [, { entry, assets }] of Collection.data) {
          /** @type {CompileEntry} */
          const compileEntry = {
            name: entry.originalName,
            assetFile: entry.filename,
            sourceFile: entry.sourceFile,
            resource: entry.resource,
            outputPath: entry.outputPath,
            assets,
          };
          entries.push(compileEntry);
        }

        return hooks.afterEmit.promise(entries);
      })
      .then(() => {
        if (Option.hasAfterEmit()) {
          return Option.afterEmit(entries, compilation).catch((error) => {
            this.exceptions.add(afterEmitException(error));
          });
        }
      })
      .catch((error) => {
        this.exceptions.add(error);
      });

    this.promises.push(promise);

    return promise;
  }

  /**
   * Execute after compilation.
   * Reset initial settings and caches by webpack serve/watch, display verbose.
   *
   * @param {Object} stats
   * @return {Promise}
   * @async
   */
  done(stats) {
    const { compilation } = this;

    if (PluginService.isWatchMode()) {
      const watchDirs = Option.getRootSourcePaths();

      // initialize snapshot only once, after compilation
      if (!this.isSnapshotInitialized) {
        const pluginOptions = Option.get();
        Snapshot.init({
          fs: this.fs,
          dir: watchDirs,
          includes: [pluginOptions.test, pluginOptions.js.test],
        });

        // create initial snapshot of watching files, before any changes
        Snapshot.create();

        this.isSnapshotInitialized = true;
      }

      // allow watching for changes (add/remove/rename) of linked/missing scripts for static entry too.
      if (Option.isDynamicEntry()) {
        watchDirs.forEach((dir) => compilation.contextDependencies.add(dir));
      }
    }

    // do something on done in the promise
    return Promise.all(this.promises)
      .then(() => {
        // do nothing, it required to be the finally called
      })
      .catch((error) => {
        // do nothing, it required to be the finally called
      })
      .finally(() => {
        const hasError = compilation.errors.length > 0 || this.exceptions.size > 0;

        compilation.name = compilationName(hasError);

        if (this.exceptions.size > 0) {
          const messages = Array.from(this.exceptions).join('\n\n');
          this.exceptions.clear();
          throw new Error(messages);
        }

        if (Option.isVerbose()) verbose();

        Asset.reset();
        AssetEntry.reset();
        AssetTrash.reset();
        Collection.reset();
        PluginService.reset();
        Resolver.reset();
      });
  }

  /**
   * Called when the compiler is closing or a watching compilation has stopped.
   */
  shutdown() {
    PluginService.shutdown();
  }
}

module.exports = AssetCompiler;
